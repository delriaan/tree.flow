% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tree_flow.R
\name{tree.flow}
\alias{tree.flow}
\title{Tree Flow}
\description{
Tree Flow is an R6 class that facilitates the creation and navigation of user-defined decision rules. 
\itemize{
\item 'Rules' are the \emph{prescriptive} decision points observed looking visually at a typical flow diagram.  The class provides methods for managing rules (i.e., adding, redefining, removing)
\item Each branch of a split is structured in an environment containing the following members:
  \describe{
   \item{$values}{ The values beloning to the current branch: ultimately a subset of the values of "root"}
   \item{$name}{ The name associated with the current branch}
   \item{$aliases}{ The alternative names associated with the current branch}
   \item{$leaf.nodes}{ The distinct count of \code{values:key}}
   \item{$rule}{ The quote expression to be applied to $values during tree population}
   \item{$prev}{ A pointer to the previous branch (\code{$prev})}
   \item{$false}{ A pointer to the child branch containing values that evaluate as \code{FALSE} when the branch rule is applied}
   \item{$true}{ A pointer to the child branch containing values that evaluate as \code{TRUE} when the branch rule is applied}
   \item{$`#`}{ A pointer to the class environment: this allows certain global methods to be accessed via chaining with the '$' accessor.}
 } 
 \cr\cr Removing a branch (i.e., setting the branch to \code{NULL}) removes all child branches as well
}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{tree.name}}{The name of the tree}

\item{\code{root}}{The root of the tree}

\item{\code{rule.book}}{The list of decision rules}

\item{\code{id}}{The index of the current branch}

\item{\code{tree.key}}{The \code{\link[data.table]{data.table}} key column name}

\item{\code{graph}}{The \code{\link[igraph]{igraph-package}} representation of the tree}
}
\if{html}{\out{</div>}}
}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{total.branches}}{Count the number of branches}

\item{\code{depth}}{Calculate tree depth}

\item{\code{curnt}}{Returns the current branch}

\item{\code{parent}}{Goto the parent branch: this is similar to \code{$goto()} except it only moves to the parent branch of the current branch}

\item{\code{leaves}}{Return the content of the current branch object \code{values}}

\item{\code{tree}}{Return the environment list for the tree}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-tree.flow-new}{\code{tree.flow$new()}}
\item \href{#method-tree.flow-manage.rules}{\code{tree.flow$manage.rules()}}
\item \href{#method-tree.flow-add.branches}{\code{tree.flow$add.branches()}}
\item \href{#method-tree.flow-set.branch}{\code{tree.flow$set.branch()}}
\item \href{#method-tree.flow-del.branch}{\code{tree.flow$del.branch()}}
\item \href{#method-tree.flow-goto}{\code{tree.flow$goto()}}
\item \href{#method-tree.flow-list.branches}{\code{tree.flow$list.branches()}}
\item \href{#method-tree.flow-make.decision}{\code{tree.flow$make.decision()}}
\item \href{#method-tree.flow-populate}{\code{tree.flow$populate()}}
\item \href{#method-tree.flow-plot}{\code{tree.flow$plot()}}
\item \href{#method-tree.flow-clone}{\code{tree.flow$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-tree.flow-new"></a>}}
\if{latex}{\out{\hypertarget{method-tree.flow-new}{}}}
\subsection{Method \code{new()}}{
Initialize a new tree
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{tree.flow$new(init.values, init.key, name)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{init.values}}{The values with which the tree is to be populate: must be a list (each member of the list must be the same length) or named dimensional object}

\item{\code{init.key}}{The element or column name from \code{init.values} to serve as the \code{\link[data.table]{data.table}} key to be used for counting elements in a branch}

\item{\code{name}}{The desired name of the decision support tree}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-tree.flow-manage.rules"></a>}}
\if{latex}{\out{\hypertarget{method-tree.flow-manage.rules}{}}}
\subsection{Method \code{manage.rules()}}{
Register and manage decision rules by operating on the class member \code{$rule.book}, the list of rules for use by branches.  It is up to the user to ensure that the rule expression is appropriate for the data type of the values used to initialize the class (argument \code{init.values} of class method \code{$new()})
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{tree.flow$manage.rules(..., rem = FALSE, rtype = "list", .debug = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{\code{\link[rlang]{dots_list}}: One or more lists with members \code{name}, \code{def}, and \code{desc}}

\item{\code{rem}}{When \code{TRUE}, the rule is removed from the class member \code{$rule.book} (see section 'Details')}

\item{\code{rtype}}{Denotes the type of structure for the argument \code{this.rule}; \code{list}, \code{"nlist"} (nested lists), and \code{tabular} (2D objects) are supported (see section 'Details').}

\item{\code{.debug}}{(logical) When \code{TRUE}, additional execution information is produced}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
\emph{\code{this.rule}}
\itemize{
 \item \code{name}: A label for the rule
 \item \code{def}: A expression operating on branch \code{values}, or a function accepting branch \code{value} as its first argument.  Either option must return a logical vector when evaluated or invoked.
 \item \code{desc}: The plain-language description of the rule)
}\cr When more than one rule is supplied to \code{'...'}, arguments \code{rem} and \code{rtype}, must be the same length as the number of supplied rules; otherwise, the first value in each argument is recycled to the length of \code{'...'}.

\emph{\code{rtype}}
\itemize{
 \item \code{list}    : \code{list(name = , def = , desc = )}
 \item \code{nlist}   : \code{list(list(name = , def = , desc = ), list(name = , def = , desc = ), ...)}; a maximum depth of two is supported
 \item \code{tabular} : \code{data{table, frame}(name = c(...), def = c(...), desc = c(...))}
}
}

\subsection{Returns}{
The class, invisibly
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-tree.flow-add.branches"></a>}}
\if{latex}{\out{\hypertarget{method-tree.flow-add.branches}{}}}
\subsection{Method \code{add.branches()}}{
Add empty objects to the current branch's 'true' and 'false' objects. The class object pointing to the current branch is set to the branch being modified.  Do not use this method to update branch values: this method will not overwrite an existing branch.  Use methods \code{$set.branch.name()} and \code{$set.branch.rule()}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{tree.flow$add.branches(
  branch = self$curnt,
  false.label = "false",
  true.label = "true",
  final.label = "END",
  rule = quote((TRUE)),
  aliases = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{branch}}{The branch environment to which child branches are being added: either an object or the target branch's name.}

\item{\code{false.label}}{The assignment object "name" in the "false" branch}

\item{\code{true.label}}{The assignment object "name" in the "true" branch}

\item{\code{final.label}}{The value to assign the terminating node indicator in the current branch}

\item{\code{rule}}{A string indicating which registered rule is to be assigned to the branch before adding child}

\item{\code{aliases}}{A character vector of additional names by which the branch may be understood (e.g., "name_2", "name_3", etc.)}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The branch, invisibly
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-tree.flow-set.branch"></a>}}
\if{latex}{\out{\hypertarget{method-tree.flow-set.branch}{}}}
\subsection{Method \code{set.branch()}}{
Replace the rule of the indicated branch
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{tree.flow$set.branch(
  branch = self$curnt,
  new.name = self$curnt$name,
  new.rule = self$curnt$rule
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{branch}}{The target branch (by name or id) or, when NULL, the current branch}

\item{\code{new.name}}{The desired name to use for the branch}

\item{\code{new.rule}}{The desired rule to use for the branch}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The branch, invisibly
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-tree.flow-del.branch"></a>}}
\if{latex}{\out{\hypertarget{method-tree.flow-del.branch}{}}}
\subsection{Method \code{del.branch()}}{
Delete a branch: child branches are consequently removed
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{tree.flow$del.branch(branch = self$curnt, confirm = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{branch}}{The target branch (by name or id) or, when NULL, the current branch}

\item{\code{confirm}}{(logical | TRUE) When \code{TRUE}, deletion confirmation is provided}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Invisibly, the class environment with the current branch set to the root
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-tree.flow-goto"></a>}}
\if{latex}{\out{\hypertarget{method-tree.flow-goto}{}}}
\subsection{Method \code{goto()}}{
Jump to an arbitrary branch in the tree, setting the "current branch" pointer to the target branch
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{tree.flow$goto(name = NULL, id = private$envs[[name]], .verbose = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{name}}{The name (not alias) of the target branch}

\item{\code{id}}{The id value of the target branch}

\item{\code{.verbose}}{When \code{TRUE}, the current branch's ID and name are echoed}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The current branch, invisibly
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-tree.flow-list.branches"></a>}}
\if{latex}{\out{\hypertarget{method-tree.flow-list.branches}{}}}
\subsection{Method \code{list.branches()}}{
Print the structure of the private list of branches
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{tree.flow$list.branches()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
The list of branches, invisibly
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-tree.flow-make.decision"></a>}}
\if{latex}{\out{\hypertarget{method-tree.flow-make.decision}{}}}
\subsection{Method \code{make.decision()}}{
Apply a branch's rule to it's stored values and populate downstream 'true' and 'false' child branches. The branch is returned invisibly.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{tree.flow$make.decision(branch = self$curnt, .debug = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{branch}}{A class branch object, defaulting to the currently pointed to branch}

\item{\code{.debug}}{Print debugging information}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The branch, invisibly
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-tree.flow-populate"></a>}}
\if{latex}{\out{\hypertarget{method-tree.flow-populate}{}}}
\subsection{Method \code{populate()}}{
Iteratively populate the tree by rendering decisions only on branches that have non-NULL "true" and "false" values.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{tree.flow$populate(branch = "root", .debug = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{branch}}{The target branch (by name or id) or, when NULL, "root".  Iteration begins at this point in the tree.}

\item{\code{.debug}}{Print debugging information}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
For a given branch, the values that map to \code{TRUE} are copied to the current branch's corresponding member \code{$true} and vice-versa.  The values of the current branch are preserved for exploration branch-by-branch.  
 
 This is performed sequentially and recursively using a "first matching rule wins" method: this means that if the set of values for a branch \emph{could} be mapped to \code{TRUE} in multiple branches of the same depth, it will only map to \emph{one} branch due to the propagation of values described before. 
 
 \strong{Population begins at the root by default.}  Once populated a corresponding \code{\link[igraph]{igraph-package}} member \code{$graph} is created
}

\subsection{Returns}{
The class environment, invisibly
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-tree.flow-plot"></a>}}
\if{latex}{\out{\hypertarget{method-tree.flow-plot}{}}}
\subsection{Method \code{plot()}}{
Creates an visualization of the tree using \code{\link[visNetwork]{visIgraph}}.  The branch list is converted into a graph via \code{\link[igraph]{graph_from_literal}}
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{tree.flow$plot(
  ...,
  igraph.args = NULL,
  layout.args = list(visHierarchicalLayout = list()),
  refresh = FALSE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{\code{\link[rlang]{dots_list}}: igraph expressions that will customize the graph before sending to \code{\link[visNetwork]{visIgraph}}}

\item{\code{igraph.args}}{A named list of arguments to send to \code{\link[visNetwork]{visIgraph}}}

\item{\code{layout.args}}{A named list of length \code{1L} given as \code{list("layout name" = <argument list>)} (see \url{https://datastorm-open.github.io/visNetwork/layout.html} for details}

\item{\code{refresh}}{(logical | FALSE) When \code{TRUE}, the preceding arguments are defaulted to existing values in \code{$private$vizArgs}}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
For \code{...}, the expressions are executed in the order given.\cr 
\itemize{
 \item Use \code{g} as the symbol for the igraph object when needed (e.g., \code{ V(g) <- ... })
 \item By default, vertices are supplied with a \emph{title} and \emph{level} attributes; edges with \emph{title} and \emph{label} attributes
 \item \itemize{
   \item Assignment to graph objects can use \code{<-}. The graph is automatically on each pass.  
   \item To updated the entire graph, use the following: \code{ g <<- ... }
   }
 \item Library calls should be prefixed with \code{"igraph::"} unless the library has been loaded and attached
}

The class member \code{$graph} is not updated unless the \code{ self$graph <<- ...} is used.
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-tree.flow-clone"></a>}}
\if{latex}{\out{\hypertarget{method-tree.flow-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{tree.flow$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
